{
  "address": "0x59928E99aD83A52B790DfEb5D1257786139406aF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "artistEmailAddress",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "artistFullName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "artistStageName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSongName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "recordLabelName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "featuredArtists",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "artworkHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primaryMusicGenre",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondaryMusicGenre",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "languageOfPerformance",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "songwriters",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "songwritersWallets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "AudioHash",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct BemaChain.SongDetails",
          "name": "_SongDetails",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "Owner",
          "type": "address"
        }
      ],
      "name": "SongDataCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "SongDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "TokenPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "artistEmailAddress",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "artistFullName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "artistStageName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSongName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "recordLabelName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "featuredArtists",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "artworkHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primaryMusicGenre",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondaryMusicGenre",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "languageOfPerformance",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "songwriters",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "songwritersWallets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "AudioHash",
              "type": "string"
            }
          ],
          "internalType": "struct BemaChain.SongDetails",
          "name": "_songDetails",
          "type": "tuple"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSongData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "artistEmailAddress",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "artistFullName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "artistStageName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "projectSongName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "projectType",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "recordLabelName",
                  "type": "string"
                },
                {
                  "internalType": "address[]",
                  "name": "featuredArtists",
                  "type": "address[]"
                },
                {
                  "internalType": "string",
                  "name": "artworkHash",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "primaryMusicGenre",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "secondaryMusicGenre",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "languageOfPerformance",
                  "type": "string"
                },
                {
                  "internalType": "string[]",
                  "name": "songwriters",
                  "type": "string[]"
                },
                {
                  "internalType": "address[]",
                  "name": "songwritersWallets",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "AudioHash",
                  "type": "string"
                }
              ],
              "internalType": "struct BemaChain.SongDetails",
              "name": "SongDetails",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "Owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "forSale",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokenExist",
              "type": "bool"
            }
          ],
          "internalType": "struct BemaChain.Song",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenForSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchaseToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "artistEmailAddress",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "artistFullName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "artistStageName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSongName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "recordLabelName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "featuredArtists",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "artworkHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primaryMusicGenre",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondaryMusicGenre",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "languageOfPerformance",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "songwriters",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "songwritersWallets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "AudioHash",
              "type": "string"
            }
          ],
          "internalType": "struct BemaChain.SongDetails",
          "name": "_songDetails",
          "type": "tuple"
        }
      ],
      "name": "updateSongData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_forSale",
          "type": "bool"
        }
      ],
      "name": "updateTokenForSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45c74a42d0e4d6ace693f54c73570af1ea4dfb8756518a3e6de5fe9e6e7eedd9",
  "receipt": {
    "to": null,
    "from": "0x4639155fb94e983a13f76be68845012f7eDCA46f",
    "contractAddress": "0x59928E99aD83A52B790DfEb5D1257786139406aF",
    "transactionIndex": 7,
    "gasUsed": "5069540",
    "logsBloom": "0x
    "blockHash": "0xc50363cc8b8897f19604ade82cb2d28fc4eeb7a330700d98456aec6f68fd4229",
    "transactionHash": "0x45c74a42d0e4d6ace693f54c73570af1ea4dfb8756518a3e6de5fe9e6e7eedd9",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 33512019,
        "transactionHash": "0x45c74a42d0e4d6ace693f54c73570af1ea4dfb8756518a3e6de5fe9e6e7eedd9",
        "address": "0x59928E99aD83A52B790DfEb5D1257786139406aF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004639155fb94e983a13f76be68845012f7edca46f"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xc50363cc8b8897f19604ade82cb2d28fc4eeb7a330700d98456aec6f68fd4229"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 33512019,
        "transactionHash": "0x45c74a42d0e4d6ace693f54c73570af1ea4dfb8756518a3e6de5fe9e6e7eedd9",
        "address": "0x59928E99aD83A52B790DfEb5D1257786139406aF",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004639155fb94e983a13f76be68845012f7edca46f",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004639155fb94e983a13f76be68845012f7edca46f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001431e0fae6d7217caa0000000",
        "logIndex": 18,
        "blockHash": "0xc50363cc8b8897f19604ade82cb2d28fc4eeb7a330700d98456aec6f68fd4229"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 33512019,
        "transactionHash": "0x45c74a42d0e4d6ace693f54c73570af1ea4dfb8756518a3e6de5fe9e6e7eedd9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004639155fb94e983a13f76be68845012f7edca46f",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000438a32fa7f20ca4000000000000000000000000000000000000000000000000099e35e918caf348000000000000000000000000000000000000000000001cc190be22cb227726c0000000000000000000000000000000000000000000000000056592b970d8e6a4000000000000000000000000000000000000000000001cc194f6c5faca693364",
        "logIndex": 19,
        "blockHash": "0xc50363cc8b8897f19604ade82cb2d28fc4eeb7a330700d98456aec6f68fd4229"
      }
    ],
    "blockNumber": 33512019,
    "cumulativeGasUsed": "5457216",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "348a697891fcd62bc77c10ec751914db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artistEmailAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistFullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistStageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSongName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabelName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"featuredArtists\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"artworkHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"languageOfPerformance\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"songwriters\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"songwritersWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"AudioHash\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct BemaChain.SongDetails\",\"name\":\"_SongDetails\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"SongDataCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SongDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artistEmailAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistFullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistStageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSongName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabelName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"featuredArtists\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"artworkHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"languageOfPerformance\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"songwriters\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"songwritersWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"AudioHash\",\"type\":\"string\"}],\"internalType\":\"struct BemaChain.SongDetails\",\"name\":\"_songDetails\",\"type\":\"tuple\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSongData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artistEmailAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistFullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistStageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSongName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabelName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"featuredArtists\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"artworkHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"languageOfPerformance\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"songwriters\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"songwritersWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"AudioHash\",\"type\":\"string\"}],\"internalType\":\"struct BemaChain.SongDetails\",\"name\":\"SongDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"forSale\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokenExist\",\"type\":\"bool\"}],\"internalType\":\"struct BemaChain.Song\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artistEmailAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistFullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistStageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSongName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabelName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"featuredArtists\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"artworkHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondaryMusicGenre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"languageOfPerformance\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"songwriters\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"songwritersWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"AudioHash\",\"type\":\"string\"}],\"internalType\":\"struct BemaChain.SongDetails\",\"name\":\"_songDetails\",\"type\":\"tuple\"}],\"name\":\"updateSongData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_forSale\",\"type\":\"bool\"}],\"name\":\"updateTokenForSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bema2.sol\":\"BemaChain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/bema2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BemaChain is ERC1155, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    uint256 public mintFee;\\n\\n    // Struct for storing project/song information\\n    struct SongDetails {\\n        string artistEmailAddress;\\n        string artistFullName;\\n        string artistStageName;\\n        string projectSongName;\\n        string projectType;\\n        string recordLabelName;\\n        address[] featuredArtists;\\n        string artworkHash;\\n        string primaryMusicGenre;\\n        string secondaryMusicGenre;\\n        string languageOfPerformance;\\n        string[] songwriters;\\n        address[] songwritersWallets;\\n        uint256 price;\\n        string AudioHash;\\n    }\\n    struct Song {\\n        SongDetails SongDetails;\\n        address Owner;\\n        bool forSale;\\n        bool tokenExist;\\n    }\\n\\n    mapping(uint256 => Song) private _songData;\\n\\n    // string tokenURI;\\n\\n    constructor(\\n        // string memory _tokenURI,\\n        uint256 _mintFee\\n    ) ERC1155(\\\"https://bemachain.com/api/item/{id}.json\\\") {\\n        // tokenURI = _tokenURI;\\n        mintFee = _mintFee;\\n        _mint(msg.sender, 0, 100000000000 ether, \\\"\\\");\\n    }\\n\\n    // Function to create a new ERC-1155 token for a project/song\\n    function createToken(SongDetails memory _songDetails) public payable returns (uint256) {\\n        //checkes if the required mint fee was sent\\n        require(msg.value == mintFee, \\\"Wrong Amount Sent\\\");\\n        (bool success, ) = payable(Ownable.owner()).call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Transaction error\\\");\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n        // Create new Song struct and Store Song data in mapping\\n        _songData[newItemId] = Song({\\n            SongDetails: _songDetails,\\n            Owner: msg.sender,\\n            forSale: true,\\n            tokenExist: true\\n        });\\n\\n        // Mint new ERC-1155 token to the contract creator\\n        _mint(msg.sender, newItemId, 1, \\\"\\\");\\n\\n        emit SongDataCreated(newItemId, _songData[newItemId].SongDetails, msg.sender);\\n\\n        // Return the new token ID\\n        return newItemId;\\n    }\\n\\n    function getSongData(uint256 tokenId) public view returns (Song memory) {\\n        return _songData[tokenId];\\n    }\\n\\n    // Function to update project/song information for a given token ID\\n    function updateSongData(uint256 tokenId, SongDetails memory _songDetails) public {\\n        // require(_songData[tokenId].artistEmailAddress != address(0), \\\"Token does not exist\\\");\\n        require(_songData[tokenId].tokenExist, \\\"Token does not exist\\\");\\n        require(_songData[tokenId].Owner == msg.sender, \\\"Unauthorized to update song data\\\");\\n        _songData[tokenId].SongDetails = _songDetails;\\n\\n        // Emit event to signal that the Song data has been updated\\n        emit SongDataUpdated(tokenId);\\n    }\\n\\n    // Function to check if a token is for sale\\n    function isTokenForSale(uint256 tokenId) public view returns (bool) {\\n        //require(_songData[tokenId].artistEmailAddress != address(0), \\\"Token does not exist\\\");\\n        require(_songData[tokenId].tokenExist, \\\"Token does not exist\\\");\\n        return _songData[tokenId].forSale;\\n    }\\n\\n    // Function to update the forSale status of a token\\n    function updateTokenForSaleStatus(uint256 tokenId, bool _forSale) public {\\n        //require(_songData[tokenId].artistEmailAddress != address(0), \\\"Token does not exist\\\");\\n        require(_songData[tokenId].tokenExist, \\\"Token does not exist\\\");\\n        require(\\n            _songData[tokenId].Owner == msg.sender,\\n            \\\"Unauthorized to update token for sale status\\\"\\n        );\\n        _songData[tokenId].forSale = _forSale;\\n    }\\n\\n    // Function to get the total number of ERC-1155 tokens\\n    function getTotalTokens() public view returns (uint256) {\\n        return _tokenIds.current();\\n    }\\n\\n    // Function to get the token ID for a given project/song\\n    // function getTokenId(address privateWalletKey) public view returns (uint256) {\\n    //     // Loop through all the tokens and check if the privateWalletKey matches\\n    //     uint256 totalTokens = _tokenIds.current();\\n    //     for (uint256 i = 1; i <= totalTokens; i++) {\\n    //         if (_songData[i].privateWalletKey == privateWalletKey) {\\n    //             return i;\\n    //         }\\n    //     }\\n    //     // Return 0 if no matching token is found\\n    //     return 0;\\n    // }\\n\\n    // Function to purchase a project/song token\\n    function purchaseToken(uint256 tokenId) public payable {\\n        // Get the Song data for the given token ID\\n        Song storage song = _songData[tokenId]; // Ensure the token is for sale\\n        require(_songData[tokenId].forSale, \\\"Token is not for sale\\\");\\n\\n        // Ensure the correct amount of Ether is sent\\n        require(\\n            msg.value == _songData[tokenId].SongDetails.price,\\n            \\\"Incorrect amount of Ether sent\\\"\\n        );\\n\\n        // Transfer the token from the contract creator to the buyer\\n        safeTransferFrom(msg.sender, song.Owner, tokenId, 1, \\\"\\\");\\n\\n        // Mark the token as no longer for sale\\n        _songData[tokenId].forSale = false;\\n\\n        // Emit event to signal that the token has been purchased\\n        emit TokenPurchased(tokenId, msg.sender);\\n    }\\n\\n    // Function to withdraw Ether from the contract\\n    function withdraw() public onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    // Function to withdraw ERC-20 tokens from the contract\\n    function withdrawTokens(address tokenAddress) public onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    // Event to signal that the Song data has been created\\n    event SongDataCreated(uint256 tokenId, SongDetails _SongDetails, address Owner);\\n\\n    // Event to signal that the Song data has been updated\\n    event SongDataUpdated(uint256 tokenId);\\n\\n    // Event to signal that a token has been purchased\\n    event TokenPurchased(uint256 tokenId, address buyer);\\n}\\n\",\"keccak256\":\"0x9fa5b7e670b29a9461e319a6325ad797ef81239bf895e1c20990d64475c4338c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620066053803806200660583398181016040528101906200003791906200074c565b604051806060016040528060288152602001620065dd602891396200006281620000c260201b60201c565b506200008362000077620000de60201b60201c565b620000e660201b60201c565b80600581905550620000bb3360006c01431e0fae6d7217caa000000060405180602001604052806000815250620001ac60201b60201c565b5062000e3a565b8060029080519060200190620000da92919062000652565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156200021f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002169062000805565b60405180910390fd5b600062000231620000de60201b60201c565b9050600062000246856200039460201b60201c565b905060006200025b856200039460201b60201c565b905062000274836000898585896200041560201b60201c565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002d5919062000856565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405162000355929190620008c4565b60405180910390a462000374836000898585896200041d60201b60201c565b6200038b836000898989896200042560201b60201c565b50505050505050565b60606000600167ffffffffffffffff811115620003b657620003b5620008f1565b5b604051908082528060200260200182016040528015620003e55781602001602082028036833780820191505090505b50905082816000815181106200040057620003ff62000920565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b620004518473ffffffffffffffffffffffffffffffffffffffff166200062f60201b62001ffc1760201c565b1562000627578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016200049a95949392919062000a38565b602060405180830381600087803b158015620004b557600080fd5b505af1925050508015620004e957506040513d601f19601f82011682018060405250810190620004e6919062000af9565b60015b6200059b57620004f862000b38565b806308c379a014156200055c57506200051062000b93565b806200051d57506200055e565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000553919062000c81565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005929062000d1b565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161462000625576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200061c9062000db3565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054620006609062000e04565b90600052602060002090601f016020900481019282620006845760008555620006d0565b82601f106200069f57805160ff1916838001178555620006d0565b82800160010185558215620006d0579182015b82811115620006cf578251825591602001919060010190620006b2565b5b509050620006df9190620006e3565b5090565b5b80821115620006fe576000816000905550600101620006e4565b5090565b6000604051905090565b600080fd5b6000819050919050565b620007268162000711565b81146200073257600080fd5b50565b60008151905062000746816200071b565b92915050565b6000602082840312156200076557620007646200070c565b5b6000620007758482850162000735565b91505092915050565b600082825260208201905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000620007ed6021836200077e565b9150620007fa826200078f565b604082019050919050565b600060208201905081810360008301526200082081620007de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008638262000711565b9150620008708362000711565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620008a857620008a762000827565b5b828201905092915050565b620008be8162000711565b82525050565b6000604082019050620008db6000830185620008b3565b620008ea6020830184620008b3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200097c826200094f565b9050919050565b6200098e816200096f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620009d0578082015181840152602081019050620009b3565b83811115620009e0576000848401525b50505050565b6000601f19601f8301169050919050565b600062000a048262000994565b62000a1081856200099f565b935062000a22818560208601620009b0565b62000a2d81620009e6565b840191505092915050565b600060a08201905062000a4f600083018862000983565b62000a5e602083018762000983565b62000a6d6040830186620008b3565b62000a7c6060830185620008b3565b818103608083015262000a908184620009f7565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62000ad38162000a9c565b811462000adf57600080fd5b50565b60008151905062000af38162000ac8565b92915050565b60006020828403121562000b125762000b116200070c565b5b600062000b228482850162000ae2565b91505092915050565b60008160e01c9050919050565b600060033d111562000b5a5760046000803e62000b5760005162000b2b565b90505b90565b62000b6882620009e6565b810181811067ffffffffffffffff8211171562000b8a5762000b89620008f1565b5b80604052505050565b600060443d101562000ba55762000c32565b62000baf62000702565b60043d036004823e80513d602482011167ffffffffffffffff8211171562000bd957505062000c32565b808201805167ffffffffffffffff81111562000bf9575050505062000c32565b80602083010160043d03850181111562000c1857505050505062000c32565b62000c298260200185018662000b5d565b82955050505050505b90565b600081519050919050565b600062000c4d8262000c35565b62000c5981856200077e565b935062000c6b818560208601620009b0565b62000c7681620009e6565b840191505092915050565b6000602082019050818103600083015262000c9d818462000c40565b905092915050565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600062000d036034836200077e565b915062000d108262000ca5565b604082019050919050565b6000602082019050818103600083015262000d368162000cf4565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600062000d9b6028836200077e565b915062000da88262000d3d565b604082019050919050565b6000602082019050818103600083015262000dce8162000d8c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000e1d57607f821691505b6020821081141562000e345762000e3362000dd5565b5b50919050565b6157938062000e4a6000396000f3fe6080604052600436106101295760003560e01c80638da5cb5b116100ab578063e2b818791161006f578063e2b81879146103d3578063e5a65b69146103fc578063e985e9c514610439578063f08b82e614610476578063f242432a146104a1578063f2fde38b146104ca57610129565b80638da5cb5b1461030a578063a22cb46514610335578063c2db2c421461035e578063c73244b61461037a578063d152f79c146103a357610129565b80633ccfd60b116100f25780633ccfd60b1461023957806349df728c146102505780634e1273f4146102795780634fed1c94146102b6578063715018a6146102f357610129565b8062fdd58e1461012e57806301ffc9a71461016b5780630e89341c146101a857806313966db5146101e55780632eb2c2d614610210575b600080fd5b34801561013a57600080fd5b5061015560048036038101906101509190613284565b6104f3565b60405161016291906132d3565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190613346565b6105bc565b60405161019f919061338e565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca91906133a9565b61069e565b6040516101dc919061346f565b60405180910390f35b3480156101f157600080fd5b506101fa610732565b60405161020791906132d3565b60405180910390f35b34801561021c57600080fd5b506102376004803603810190610232919061368e565b610738565b005b34801561024557600080fd5b5061024e6107d9565b005b34801561025c57600080fd5b506102776004803603810190610272919061375d565b61082a565b005b34801561028557600080fd5b506102a0600480360381019061029b919061384d565b610951565b6040516102ad9190613983565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d891906133a9565b610a6a565b6040516102ea919061338e565b60405180910390f35b3480156102ff57600080fd5b50610308610afa565b005b34801561031657600080fd5b5061031f610b0e565b60405161032c91906139b4565b60405180910390f35b34801561034157600080fd5b5061035c600480360381019061035791906139fb565b610b38565b005b610378600480360381019061037391906133a9565b610b4e565b005b34801561038657600080fd5b506103a1600480360381019061039c9190613eb3565b610cd0565b005b6103bd60048036038101906103b89190613f0f565b610fd3565b6040516103ca91906132d3565b60405180910390f35b3480156103df57600080fd5b506103fa60048036038101906103f59190613f58565b6113e6565b005b34801561040857600080fd5b50610423600480360381019061041e91906133a9565b61151f565b6040516104309190614372565b60405180910390f35b34801561044557600080fd5b50610460600480360381019061045b9190614394565b611e32565b60405161046d919061338e565b60405180910390f35b34801561048257600080fd5b5061048b611ec6565b60405161049891906132d3565b60405180910390f35b3480156104ad57600080fd5b506104c860048036038101906104c391906143d4565b611ed7565b005b3480156104d657600080fd5b506104f160048036038101906104ec919061375d565b611f78565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b906144dd565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061068757507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061069757506106968261201f565b5b9050919050565b6060600280546106ad9061452c565b80601f01602080910402602001604051908101604052809291908181526020018280546106d99061452c565b80156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b50505050509050919050565b60055481565b610740612089565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610786575061078585610780612089565b611e32565b5b6107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc906145d0565b60405180910390fd5b6107d28585858585612091565b5050505050565b6107e16123b3565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610827573d6000803e3d6000fd5b50565b6108326123b3565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161088d91906139b4565b60206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190614605565b6040518363ffffffff1660e01b81526004016108fa929190614632565b602060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c9190614670565b505050565b60608151835114610997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098e9061470f565b60405180910390fd5b6000835167ffffffffffffffff8111156109b4576109b3613496565b5b6040519080825280602002602001820160405280156109e25781602001602082028036833780820191505090505b50905060005b8451811015610a5f57610a2f858281518110610a0757610a0661472f565b5b6020026020010151858381518110610a2257610a2161472f565b5b60200260200101516104f3565b828281518110610a4257610a4161472f565b5b60200260200101818152505080610a589061478d565b90506109e8565b508091505092915050565b600060066000838152602001908152602001600020600f0160159054906101000a900460ff16610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690614822565b60405180910390fd5b60066000838152602001908152602001600020600f0160149054906101000a900460ff169050919050565b610b026123b3565b610b0c6000612431565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b4a610b43612089565b83836124f7565b5050565b600060066000838152602001908152602001600020905060066000838152602001908152602001600020600f0160149054906101000a900460ff16610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf9061488e565b60405180910390fd5b60066000838152602001908152602001600020600001600d01543414610c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1a906148fa565b60405180910390fd5b610c643382600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600160405180602001604052806000815250611ed7565b600060066000848152602001908152602001600020600f0160146101000a81548160ff0219169083151502179055507fab61c11a884682e987d05718b9417eddface230fb64cd55f423ec6acbc4c3c618233604051610cc492919061491a565b60405180910390a15050565b60066000838152602001908152602001600020600f0160159054906101000a900460ff16610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90614822565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660066000848152602001908152602001600020600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce9061498f565b60405180910390fd5b80600660008481526020019081526020016000206000016000820151816000019080519060200190610e0a929190612f2d565b506020820151816001019080519060200190610e27929190612f2d565b506040820151816002019080519060200190610e44929190612f2d565b506060820151816003019080519060200190610e61929190612f2d565b506080820151816004019080519060200190610e7e929190612f2d565b5060a0820151816005019080519060200190610e9b929190612f2d565b5060c0820151816006019080519060200190610eb8929190612fb3565b5060e0820151816007019080519060200190610ed5929190612f2d565b50610100820151816008019080519060200190610ef3929190612f2d565b50610120820151816009019080519060200190610f11929190612f2d565b5061014082015181600a019080519060200190610f2f929190612f2d565b5061016082015181600b019080519060200190610f4d92919061303d565b5061018082015181600c019080519060200190610f6b929190612fb3565b506101a082015181600d01556101c082015181600e019080519060200190610f94929190612f2d565b509050507fdc1b104b763981b15d427f392faa0171738727335c92986f558ff9604d33b92f82604051610fc791906132d3565b60405180910390a15050565b60006005543414611019576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611010906149fb565b60405180910390fd5b6000611023610b0e565b73ffffffffffffffffffffffffffffffffffffffff163460405161104690614a4c565b60006040518083038185875af1925050503d8060008114611083576040519150601f19603f3d011682016040523d82523d6000602084013e611088565b606091505b50509050806110cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c390614aad565b60405180910390fd5b6110d66004612664565b60006110e2600461267a565b905060405180608001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200160011515815250600660008381526020019081526020016000206000820151816000016000820151816000019080519060200190611159929190612f2d565b506020820151816001019080519060200190611176929190612f2d565b506040820151816002019080519060200190611193929190612f2d565b5060608201518160030190805190602001906111b0929190612f2d565b5060808201518160040190805190602001906111cd929190612f2d565b5060a08201518160050190805190602001906111ea929190612f2d565b5060c0820151816006019080519060200190611207929190612fb3565b5060e0820151816007019080519060200190611224929190612f2d565b50610100820151816008019080519060200190611242929190612f2d565b50610120820151816009019080519060200190611260929190612f2d565b5061014082015181600a01908051906020019061127e929190612f2d565b5061016082015181600b01908051906020019061129c92919061303d565b5061018082015181600c0190805190602001906112ba929190612fb3565b506101a082015181600d01556101c082015181600e0190805190602001906112e3929190612f2d565b505050602082015181600f0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600f0160146101000a81548160ff021916908315150217905550606082015181600f0160156101000a81548160ff02191690831515021790555090505061138c3382600160405180602001604052806000815250612688565b7f06cb9100da4bca3e724a7a994a4206097b3a6ba8a5e52b0c7ab4570170b616cf8160066000848152602001908152602001600020600001336040516113d493929190614ebd565b60405180910390a18092505050919050565b60066000838152602001908152602001600020600f0160159054906101000a900460ff16611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144090614822565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660066000848152602001908152602001600020600f0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e490614f6d565b60405180910390fd5b8060066000848152602001908152602001600020600f0160146101000a81548160ff0219169083151502179055505050565b61152761309d565b6006600083815260200190815260200160002060405180608001604052908160008201604051806101e00160405290816000820180546115669061452c565b80601f01602080910402602001604051908101604052809291908181526020018280546115929061452c565b80156115df5780601f106115b4576101008083540402835291602001916115df565b820191906000526020600020905b8154815290600101906020018083116115c257829003601f168201915b505050505081526020016001820180546115f89061452c565b80601f01602080910402602001604051908101604052809291908181526020018280546116249061452c565b80156116715780601f1061164657610100808354040283529160200191611671565b820191906000526020600020905b81548152906001019060200180831161165457829003601f168201915b5050505050815260200160028201805461168a9061452c565b80601f01602080910402602001604051908101604052809291908181526020018280546116b69061452c565b80156117035780601f106116d857610100808354040283529160200191611703565b820191906000526020600020905b8154815290600101906020018083116116e657829003601f168201915b5050505050815260200160038201805461171c9061452c565b80601f01602080910402602001604051908101604052809291908181526020018280546117489061452c565b80156117955780601f1061176a57610100808354040283529160200191611795565b820191906000526020600020905b81548152906001019060200180831161177857829003601f168201915b505050505081526020016004820180546117ae9061452c565b80601f01602080910402602001604051908101604052809291908181526020018280546117da9061452c565b80156118275780601f106117fc57610100808354040283529160200191611827565b820191906000526020600020905b81548152906001019060200180831161180a57829003601f168201915b505050505081526020016005820180546118409061452c565b80601f016020809104026020016040519081016040528092919081815260200182805461186c9061452c565b80156118b95780601f1061188e576101008083540402835291602001916118b9565b820191906000526020600020905b81548152906001019060200180831161189c57829003601f168201915b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561194757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118fd575b505050505081526020016007820180546119609061452c565b80601f016020809104026020016040519081016040528092919081815260200182805461198c9061452c565b80156119d95780601f106119ae576101008083540402835291602001916119d9565b820191906000526020600020905b8154815290600101906020018083116119bc57829003601f168201915b505050505081526020016008820180546119f29061452c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1e9061452c565b8015611a6b5780601f10611a4057610100808354040283529160200191611a6b565b820191906000526020600020905b815481529060010190602001808311611a4e57829003601f168201915b50505050508152602001600982018054611a849061452c565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab09061452c565b8015611afd5780601f10611ad257610100808354040283529160200191611afd565b820191906000526020600020905b815481529060010190602001808311611ae057829003601f168201915b50505050508152602001600a82018054611b169061452c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b429061452c565b8015611b8f5780601f10611b6457610100808354040283529160200191611b8f565b820191906000526020600020905b815481529060010190602001808311611b7257829003601f168201915b50505050508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b82821015611c69578382906000526020600020018054611bdc9061452c565b80601f0160208091040260200160405190810160405280929190818152602001828054611c089061452c565b8015611c555780601f10611c2a57610100808354040283529160200191611c55565b820191906000526020600020905b815481529060010190602001808311611c3857829003601f168201915b505050505081526020019060010190611bbd565b505050508152602001600c8201805480602002602001604051908101604052809291908181526020018280548015611cf657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cac575b50505050508152602001600d8201548152602001600e82018054611d199061452c565b80601f0160208091040260200160405190810160405280929190818152602001828054611d459061452c565b8015611d925780601f10611d6757610100808354040283529160200191611d92565b820191906000526020600020905b815481529060010190602001808311611d7557829003601f168201915b5050505050815250508152602001600f820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600f820160149054906101000a900460ff16151515158152602001600f820160159054906101000a900460ff1615151515815250509050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000611ed2600461267a565b905090565b611edf612089565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611f255750611f2485611f1f612089565b611e32565b5b611f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5b906145d0565b60405180910390fd5b611f718585858585612839565b5050505050565b611f806123b3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ff0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe790614fff565b60405180910390fd5b611ff981612431565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b81518351146120d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cc90615091565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213c90615123565b60405180910390fd5b600061214f612089565b905061215f818787878787612ad5565b60005b84518110156123105760008582815181106121805761217f61472f565b5b60200260200101519050600085838151811061219f5761219e61472f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612237906151b5565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122f591906151d5565b92505081905550505050806123099061478d565b9050612162565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161238792919061522b565b60405180910390a461239d818787878787612add565b6123ab818787878787612ae5565b505050505050565b6123bb612089565b73ffffffffffffffffffffffffffffffffffffffff166123d9610b0e565b73ffffffffffffffffffffffffffffffffffffffff161461242f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612426906152ae565b60405180910390fd5b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255d90615340565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612657919061338e565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ef906153d2565b60405180910390fd5b6000612702612089565b9050600061270f85612ccc565b9050600061271c85612ccc565b905061272d83600089858589612ad5565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461278c91906151d5565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161280a9291906153f2565b60405180910390a461282183600089858589612add565b61283083600089898989612d46565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156128a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a090615123565b60405180910390fd5b60006128b3612089565b905060006128c085612ccc565b905060006128cd85612ccc565b90506128dd838989858589612ad5565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296b906151b5565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a2991906151d5565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612aa69291906153f2565b60405180910390a4612abc848a8a86868a612add565b612aca848a8a8a8a8a612d46565b505050505050505050565b505050505050565b505050505050565b612b048473ffffffffffffffffffffffffffffffffffffffff16611ffc565b15612cc4578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612b4a959493929190615470565b602060405180830381600087803b158015612b6457600080fd5b505af1925050508015612b9557506040513d601f19601f82011682018060405250810190612b9291906154ed565b60015b612c3b57612ba1615527565b806308c379a01415612bfe5750612bb6615549565b80612bc15750612c00565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf5919061346f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3290615651565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb9906156e3565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115612ceb57612cea613496565b5b604051908082528060200260200182016040528015612d195781602001602082028036833780820191505090505b5090508281600081518110612d3157612d3061472f565b5b60200260200101818152505080915050919050565b612d658473ffffffffffffffffffffffffffffffffffffffff16611ffc565b15612f25578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612dab959493929190615703565b602060405180830381600087803b158015612dc557600080fd5b505af1925050508015612df657506040513d601f19601f82011682018060405250810190612df391906154ed565b60015b612e9c57612e02615527565b806308c379a01415612e5f5750612e17615549565b80612e225750612e61565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e56919061346f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9390615651565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1a906156e3565b60405180910390fd5b505b505050505050565b828054612f399061452c565b90600052602060002090601f016020900481019282612f5b5760008555612fa2565b82601f10612f7457805160ff1916838001178555612fa2565b82800160010185558215612fa2579182015b82811115612fa1578251825591602001919060010190612f86565b5b509050612faf91906130e5565b5090565b82805482825590600052602060002090810192821561302c579160200282015b8281111561302b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612fd3565b5b50905061303991906130e5565b5090565b82805482825590600052602060002090810192821561308c579160200282015b8281111561308b57825182908051906020019061307b929190612f2d565b509160200191906001019061305d565b5b5090506130999190613102565b5090565b60405180608001604052806130b0613126565b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581525090565b5b808211156130fe5760008160009055506001016130e6565b5090565b5b808211156131225760008181613119919061319c565b50600101613103565b5090565b604051806101e001604052806060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001606081525090565b5080546131a89061452c565b6000825580601f106131ba57506131d9565b601f0160209004906000526020600020908101906131d891906130e5565b5b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061321b826131f0565b9050919050565b61322b81613210565b811461323657600080fd5b50565b60008135905061324881613222565b92915050565b6000819050919050565b6132618161324e565b811461326c57600080fd5b50565b60008135905061327e81613258565b92915050565b6000806040838503121561329b5761329a6131e6565b5b60006132a985828601613239565b92505060206132ba8582860161326f565b9150509250929050565b6132cd8161324e565b82525050565b60006020820190506132e860008301846132c4565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613323816132ee565b811461332e57600080fd5b50565b6000813590506133408161331a565b92915050565b60006020828403121561335c5761335b6131e6565b5b600061336a84828501613331565b91505092915050565b60008115159050919050565b61338881613373565b82525050565b60006020820190506133a3600083018461337f565b92915050565b6000602082840312156133bf576133be6131e6565b5b60006133cd8482850161326f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134105780820151818401526020810190506133f5565b8381111561341f576000848401525b50505050565b6000601f19601f8301169050919050565b6000613441826133d6565b61344b81856133e1565b935061345b8185602086016133f2565b61346481613425565b840191505092915050565b600060208201905081810360008301526134898184613436565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134ce82613425565b810181811067ffffffffffffffff821117156134ed576134ec613496565b5b80604052505050565b60006135006131dc565b905061350c82826134c5565b919050565b600067ffffffffffffffff82111561352c5761352b613496565b5b602082029050602081019050919050565b600080fd5b600061355561355084613511565b6134f6565b905080838252602082019050602084028301858111156135785761357761353d565b5b835b818110156135a1578061358d888261326f565b84526020840193505060208101905061357a565b5050509392505050565b600082601f8301126135c0576135bf613491565b5b81356135d0848260208601613542565b91505092915050565b600080fd5b600067ffffffffffffffff8211156135f9576135f8613496565b5b61360282613425565b9050602081019050919050565b82818337600083830152505050565b600061363161362c846135de565b6134f6565b90508281526020810184848401111561364d5761364c6135d9565b5b61365884828561360f565b509392505050565b600082601f83011261367557613674613491565b5b813561368584826020860161361e565b91505092915050565b600080600080600060a086880312156136aa576136a96131e6565b5b60006136b888828901613239565b95505060206136c988828901613239565b945050604086013567ffffffffffffffff8111156136ea576136e96131eb565b5b6136f6888289016135ab565b935050606086013567ffffffffffffffff811115613717576137166131eb565b5b613723888289016135ab565b925050608086013567ffffffffffffffff811115613744576137436131eb565b5b61375088828901613660565b9150509295509295909350565b600060208284031215613773576137726131e6565b5b600061378184828501613239565b91505092915050565b600067ffffffffffffffff8211156137a5576137a4613496565b5b602082029050602081019050919050565b60006137c96137c48461378a565b6134f6565b905080838252602082019050602084028301858111156137ec576137eb61353d565b5b835b8181101561381557806138018882613239565b8452602084019350506020810190506137ee565b5050509392505050565b600082601f83011261383457613833613491565b5b81356138448482602086016137b6565b91505092915050565b60008060408385031215613864576138636131e6565b5b600083013567ffffffffffffffff811115613882576138816131eb565b5b61388e8582860161381f565b925050602083013567ffffffffffffffff8111156138af576138ae6131eb565b5b6138bb858286016135ab565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6138fa8161324e565b82525050565b600061390c83836138f1565b60208301905092915050565b6000602082019050919050565b6000613930826138c5565b61393a81856138d0565b9350613945836138e1565b8060005b8381101561397657815161395d8882613900565b975061396883613918565b925050600181019050613949565b5085935050505092915050565b6000602082019050818103600083015261399d8184613925565b905092915050565b6139ae81613210565b82525050565b60006020820190506139c960008301846139a5565b92915050565b6139d881613373565b81146139e357600080fd5b50565b6000813590506139f5816139cf565b92915050565b60008060408385031215613a1257613a116131e6565b5b6000613a2085828601613239565b9250506020613a31858286016139e6565b9150509250929050565b600080fd5b600080fd5b600067ffffffffffffffff821115613a6057613a5f613496565b5b613a6982613425565b9050602081019050919050565b6000613a89613a8484613a45565b6134f6565b905082815260208101848484011115613aa557613aa46135d9565b5b613ab084828561360f565b509392505050565b600082601f830112613acd57613acc613491565b5b8135613add848260208601613a76565b91505092915050565b600067ffffffffffffffff821115613b0157613b00613496565b5b602082029050602081019050919050565b6000613b25613b2084613ae6565b6134f6565b90508083825260208201905060208402830185811115613b4857613b4761353d565b5b835b81811015613b8f57803567ffffffffffffffff811115613b6d57613b6c613491565b5b808601613b7a8982613ab8565b85526020850194505050602081019050613b4a565b5050509392505050565b600082601f830112613bae57613bad613491565b5b8135613bbe848260208601613b12565b91505092915050565b60006101e08284031215613bde57613bdd613a3b565b5b613be96101e06134f6565b9050600082013567ffffffffffffffff811115613c0957613c08613a40565b5b613c1584828501613ab8565b600083015250602082013567ffffffffffffffff811115613c3957613c38613a40565b5b613c4584828501613ab8565b602083015250604082013567ffffffffffffffff811115613c6957613c68613a40565b5b613c7584828501613ab8565b604083015250606082013567ffffffffffffffff811115613c9957613c98613a40565b5b613ca584828501613ab8565b606083015250608082013567ffffffffffffffff811115613cc957613cc8613a40565b5b613cd584828501613ab8565b60808301525060a082013567ffffffffffffffff811115613cf957613cf8613a40565b5b613d0584828501613ab8565b60a08301525060c082013567ffffffffffffffff811115613d2957613d28613a40565b5b613d358482850161381f565b60c08301525060e082013567ffffffffffffffff811115613d5957613d58613a40565b5b613d6584828501613ab8565b60e08301525061010082013567ffffffffffffffff811115613d8a57613d89613a40565b5b613d9684828501613ab8565b6101008301525061012082013567ffffffffffffffff811115613dbc57613dbb613a40565b5b613dc884828501613ab8565b6101208301525061014082013567ffffffffffffffff811115613dee57613ded613a40565b5b613dfa84828501613ab8565b6101408301525061016082013567ffffffffffffffff811115613e2057613e1f613a40565b5b613e2c84828501613b99565b6101608301525061018082013567ffffffffffffffff811115613e5257613e51613a40565b5b613e5e8482850161381f565b610180830152506101a0613e748482850161326f565b6101a0830152506101c082013567ffffffffffffffff811115613e9a57613e99613a40565b5b613ea684828501613ab8565b6101c08301525092915050565b60008060408385031215613eca57613ec96131e6565b5b6000613ed88582860161326f565b925050602083013567ffffffffffffffff811115613ef957613ef86131eb565b5b613f0585828601613bc7565b9150509250929050565b600060208284031215613f2557613f246131e6565b5b600082013567ffffffffffffffff811115613f4357613f426131eb565b5b613f4f84828501613bc7565b91505092915050565b60008060408385031215613f6f57613f6e6131e6565b5b6000613f7d8582860161326f565b9250506020613f8e858286016139e6565b9150509250929050565b600082825260208201905092915050565b6000613fb4826133d6565b613fbe8185613f98565b9350613fce8185602086016133f2565b613fd781613425565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61401781613210565b82525050565b6000614029838361400e565b60208301905092915050565b6000602082019050919050565b600061404d82613fe2565b6140578185613fed565b935061406283613ffe565b8060005b8381101561409357815161407a888261401d565b975061408583614035565b925050600181019050614066565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006140d88383613fa9565b905092915050565b6000602082019050919050565b60006140f8826140a0565b61410281856140ab565b935083602082028501614114856140bc565b8060005b85811015614150578484038952815161413185826140cc565b945061413c836140e0565b925060208a01995050600181019050614118565b50829750879550505050505092915050565b60006101e08301600083015184820360008601526141808282613fa9565b9150506020830151848203602086015261419a8282613fa9565b915050604083015184820360408601526141b48282613fa9565b915050606083015184820360608601526141ce8282613fa9565b915050608083015184820360808601526141e88282613fa9565b91505060a083015184820360a08601526142028282613fa9565b91505060c083015184820360c086015261421c8282614042565b91505060e083015184820360e08601526142368282613fa9565b9150506101008301518482036101008601526142528282613fa9565b91505061012083015184820361012086015261426e8282613fa9565b91505061014083015184820361014086015261428a8282613fa9565b9150506101608301518482036101608601526142a682826140ed565b9150506101808301518482036101808601526142c28282614042565b9150506101a08301516142d96101a08601826138f1565b506101c08301518482036101c08601526142f38282613fa9565b9150508091505092915050565b61430981613373565b82525050565b6000608083016000830151848203600086015261432c8282614162565b9150506020830151614341602086018261400e565b5060408301516143546040860182614300565b5060608301516143676060860182614300565b508091505092915050565b6000602082019050818103600083015261438c818461430f565b905092915050565b600080604083850312156143ab576143aa6131e6565b5b60006143b985828601613239565b92505060206143ca85828601613239565b9150509250929050565b600080600080600060a086880312156143f0576143ef6131e6565b5b60006143fe88828901613239565b955050602061440f88828901613239565b94505060406144208882890161326f565b93505060606144318882890161326f565b925050608086013567ffffffffffffffff811115614452576144516131eb565b5b61445e88828901613660565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006144c7602a836133e1565b91506144d28261446b565b604082019050919050565b600060208201905081810360008301526144f6816144ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061454457607f821691505b60208210811415614558576145576144fd565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b60006145ba602e836133e1565b91506145c58261455e565b604082019050919050565b600060208201905081810360008301526145e9816145ad565b9050919050565b6000815190506145ff81613258565b92915050565b60006020828403121561461b5761461a6131e6565b5b6000614629848285016145f0565b91505092915050565b600060408201905061464760008301856139a5565b61465460208301846132c4565b9392505050565b60008151905061466a816139cf565b92915050565b600060208284031215614686576146856131e6565b5b60006146948482850161465b565b91505092915050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006146f96029836133e1565b91506147048261469d565b604082019050919050565b60006020820190508181036000830152614728816146ec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006147988261324e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147cb576147ca61475e565b5b600182019050919050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b600061480c6014836133e1565b9150614817826147d6565b602082019050919050565b6000602082019050818103600083015261483b816147ff565b9050919050565b7f546f6b656e206973206e6f7420666f722073616c650000000000000000000000600082015250565b60006148786015836133e1565b915061488382614842565b602082019050919050565b600060208201905081810360008301526148a78161486b565b9050919050565b7f496e636f727265637420616d6f756e74206f662045746865722073656e740000600082015250565b60006148e4601e836133e1565b91506148ef826148ae565b602082019050919050565b60006020820190508181036000830152614913816148d7565b9050919050565b600060408201905061492f60008301856132c4565b61493c60208301846139a5565b9392505050565b7f556e617574686f72697a656420746f2075706461746520736f6e672064617461600082015250565b60006149796020836133e1565b915061498482614943565b602082019050919050565b600060208201905081810360008301526149a88161496c565b9050919050565b7f57726f6e6720416d6f756e742053656e74000000000000000000000000000000600082015250565b60006149e56011836133e1565b91506149f0826149af565b602082019050919050565b60006020820190508181036000830152614a14816149d8565b9050919050565b600081905092915050565b50565b6000614a36600083614a1b565b9150614a4182614a26565b600082019050919050565b6000614a5782614a29565b9150819050919050565b7f5472616e73616374696f6e206572726f72000000000000000000000000000000600082015250565b6000614a976011836133e1565b9150614aa282614a61565b602082019050919050565b60006020820190508181036000830152614ac681614a8a565b9050919050565b60008190508160005260206000209050919050565b60008154614aef8161452c565b614af98186613f98565b94506001821660008114614b145760018114614b2657614b59565b60ff1983168652602086019350614b59565b614b2f85614acd565b60005b83811015614b5157815481890152600182019150602081019050614b32565b808801955050505b50505092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614bc2614bbd83614b82565b614b8f565b9050919050565b6000614bd58254614baf565b9050919050565b6000600182019050919050565b6000614bf482614b62565b614bfe8185613fed565b9350614c0983614b6d565b8060005b83811015614c4157614c1e82614bc9565b614c28888261401d565b9750614c3383614bdc565b925050600181019050614c0d565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000614c7a8383614ae2565b905092915050565b6000600182019050919050565b6000614c9a82614c4e565b614ca481856140ab565b935083602082028501614cb685614c59565b8060005b85811015614cf157848403895281614cd28582614c6e565b9450614cdd83614c82565b925060208a01995050600181019050614cba565b50829750879550505050505092915050565b6000819050919050565b6000614d20614d1b83614b82565b614d03565b9050919050565b60006101e0830160008084018583036000870152614d458382614ae2565b925050600184018583036020870152614d5e8382614ae2565b925050600284018583036040870152614d778382614ae2565b925050600384018583036060870152614d908382614ae2565b925050600484018583036080870152614da98382614ae2565b9250506005840185830360a0870152614dc28382614ae2565b9250506006840185830360c0870152614ddb8382614be9565b9250506007840185830360e0870152614df48382614ae2565b92505060088401858303610100870152614e0e8382614ae2565b92505060098401858303610120870152614e288382614ae2565b925050600a8401858303610140870152614e428382614ae2565b925050600b8401858303610160870152614e5c8382614c8f565b925050600c8401858303610180870152614e768382614be9565b925050600d8401549050614e8981614d0d565b614e976101a08701826138f1565b50600e84018583036101c0870152614eaf8382614ae2565b925050819250505092915050565b6000606082019050614ed260008301866132c4565b8181036020830152614ee48185614d27565b9050614ef360408301846139a5565b949350505050565b7f556e617574686f72697a656420746f2075706461746520746f6b656e20666f7260008201527f2073616c65207374617475730000000000000000000000000000000000000000602082015250565b6000614f57602c836133e1565b9150614f6282614efb565b604082019050919050565b60006020820190508181036000830152614f8681614f4a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614fe96026836133e1565b9150614ff482614f8d565b604082019050919050565b6000602082019050818103600083015261501881614fdc565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061507b6028836133e1565b91506150868261501f565b604082019050919050565b600060208201905081810360008301526150aa8161506e565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061510d6025836133e1565b9150615118826150b1565b604082019050919050565b6000602082019050818103600083015261513c81615100565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061519f602a836133e1565b91506151aa82615143565b604082019050919050565b600060208201905081810360008301526151ce81615192565b9050919050565b60006151e08261324e565b91506151eb8361324e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152205761521f61475e565b5b828201905092915050565b600060408201905081810360008301526152458185613925565b905081810360208301526152598184613925565b90509392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006152986020836133e1565b91506152a382615262565b602082019050919050565b600060208201905081810360008301526152c78161528b565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061532a6029836133e1565b9150615335826152ce565b604082019050919050565b600060208201905081810360008301526153598161531d565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006153bc6021836133e1565b91506153c782615360565b604082019050919050565b600060208201905081810360008301526153eb816153af565b9050919050565b600060408201905061540760008301856132c4565b61541460208301846132c4565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006154428261541b565b61544c8185615426565b935061545c8185602086016133f2565b61546581613425565b840191505092915050565b600060a08201905061548560008301886139a5565b61549260208301876139a5565b81810360408301526154a48186613925565b905081810360608301526154b88185613925565b905081810360808301526154cc8184615437565b90509695505050505050565b6000815190506154e78161331a565b92915050565b600060208284031215615503576155026131e6565b5b6000615511848285016154d8565b91505092915050565b60008160e01c9050919050565b600060033d11156155465760046000803e61554360005161551a565b90505b90565b600060443d1015615559576155dc565b6155616131dc565b60043d036004823e80513d602482011167ffffffffffffffff821117156155895750506155dc565b808201805167ffffffffffffffff8111156155a757505050506155dc565b80602083010160043d0385018111156155c45750505050506155dc565b6155d3826020018501866134c5565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061563b6034836133e1565b9150615646826155df565b604082019050919050565b6000602082019050818103600083015261566a8161562e565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006156cd6028836133e1565b91506156d882615671565b604082019050919050565b600060208201905081810360008301526156fc816156c0565b9050919050565b600060a08201905061571860008301886139a5565b61572560208301876139a5565b61573260408301866132c4565b61573f60608301856132c4565b81810360808301526157518184615437565b9050969550505050505056fea264697066735822122041965b10f95723320a4507be8940c26715c5c8ef660b1835eaf0b28e6c59e7f364736f6c6343000809003368747470733a2f2f62656d61636861696e2e636f6d2f6170692f6974656d2f7b69647d2e6a736f6e",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2070,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)1949_storage"
      },
      {
        "astId": 2072,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "mintFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2121,
        "contract": "contracts/bema2.sol:BemaChain",
        "label": "_songData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Song)2116_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Song)2116_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BemaChain.Song)",
        "numberOfBytes": "32",
        "value": "t_struct(Song)2116_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1949_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1948,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Song)2116_storage": {
        "encoding": "inplace",
        "label": "struct BemaChain.Song",
        "members": [
          {
            "astId": 2109,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "SongDetails",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(SongDetails)2106_storage"
          },
          {
            "astId": 2111,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "Owner",
            "offset": 0,
            "slot": "15",
            "type": "t_address"
          },
          {
            "astId": 2113,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "forSale",
            "offset": 20,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 2115,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "tokenExist",
            "offset": 21,
            "slot": "15",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(SongDetails)2106_storage": {
        "encoding": "inplace",
        "label": "struct BemaChain.SongDetails",
        "members": [
          {
            "astId": 2074,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "artistEmailAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2076,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "artistFullName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2078,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "artistStageName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2080,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "projectSongName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2082,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "projectType",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2084,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "recordLabelName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2087,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "featuredArtists",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2089,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "artworkHash",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 2091,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "primaryMusicGenre",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 2093,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "secondaryMusicGenre",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 2095,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "languageOfPerformance",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2098,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "songwriters",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 2101,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "songwritersWallets",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2103,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "price",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 2105,
            "contract": "contracts/bema2.sol:BemaChain",
            "label": "AudioHash",
            "offset": 0,
            "slot": "14",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}