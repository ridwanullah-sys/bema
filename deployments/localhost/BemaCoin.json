{
  "address": "0xCace1b78160AE76398F486c8a18044da0d66d86D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BEMACoin_AmountHigherThanAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEMACoin_IndividualModeMustBeSame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEMACoin_ModeMustEitherBe_P_Or_A_",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEMACoin_PercentageMustBeAbove100",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEMACoin_PleaseSpecifyRewardMode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEMACoin_TotalShouldEqualAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEMACoin_TotalsShouldEqual100",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentagefromAvailable",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "mode",
              "type": "string"
            }
          ],
          "internalType": "struct BemaCoin.Rewardee[]",
          "name": "accounts",
          "type": "tuple[]"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "sets_maxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5a2b9131ff71389a7a1a25d76082ac4c5a14faeec55b2aa51d05e3ad7c725bc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCace1b78160AE76398F486c8a18044da0d66d86D",
    "transactionIndex": 0,
    "gasUsed": "2276419",
    "logsBloom": "0x
    "blockHash": "0xd69f39513f298a4b21668879c61a2f6d4181335b45975826c175f21812f421ea",
    "transactionHash": "0xb5a2b9131ff71389a7a1a25d76082ac4c5a14faeec55b2aa51d05e3ad7c725bc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 105,
        "transactionHash": "0xb5a2b9131ff71389a7a1a25d76082ac4c5a14faeec55b2aa51d05e3ad7c725bc",
        "address": "0xCace1b78160AE76398F486c8a18044da0d66d86D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd69f39513f298a4b21668879c61a2f6d4181335b45975826c175f21812f421ea"
      }
    ],
    "blockNumber": 105,
    "cumulativeGasUsed": "2276419",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "aaa99ab09e7dc268ad55b95b9ba264c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BEMACoin_AmountHigherThanAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEMACoin_IndividualModeMustBeSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEMACoin_ModeMustEitherBe_P_Or_A_\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEMACoin_PercentageMustBeAbove100\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEMACoin_PleaseSpecifyRewardMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEMACoin_TotalShouldEqualAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEMACoin_TotalsShouldEqual100\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentagefromAvailable\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mode\",\"type\":\"string\"}],\"internalType\":\"struct BemaCoin.Rewardee[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"sets_maxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BemaCoin.sol\":\"BemaCoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BemaCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror BEMACoin_MaxSupplyExceeded();\\nerror BEMACoin_PleaseSpecifyRewardMode();\\nerror BEMACoin_ModeMustEitherBe_P_Or_A_();\\nerror BEMACoin_IndividualModeMustBeSame();\\nerror BEMACoin_TotalsShouldEqual100();\\nerror BEMACoin_TotalShouldEqualAmount();\\nerror BEMACoin_AmountHigherThanAvailable();\\nerror BEMACoin_PercentageMustBeAbove100();\\n\\ncontract BemaCoin is ERC20, Ownable {\\n    struct Rewardee {\\n        address account;\\n        uint256 value;\\n        string mode;\\n    }\\n    uint256 public s_maxSupply = 200000000 ether;\\n    uint256 public s_available = s_maxSupply;\\n\\n    constructor() ERC20(\\\"BemaCoin\\\", \\\"BMCoin\\\") {}\\n\\n    function sets_maxSupply(uint256 _maxSupply) public onlyOwner {\\n        s_maxSupply = _maxSupply;\\n        s_available = s_maxSupply;\\n    }\\n\\n    function mintToken(\\n        uint256 amount,\\n        uint256 percentagefromAvailable,\\n        Rewardee[] memory accounts\\n    ) public onlyOwner {\\n        uint256 mintingAmount;\\n        if (\\n            (amount > 0 && percentagefromAvailable > 0) ||\\n            (amount <= 0 && percentagefromAvailable <= 0) ||\\n            (amount < 0) ||\\n            (percentagefromAvailable < 0)\\n        ) {\\n            revert BEMACoin_PleaseSpecifyRewardMode();\\n        }\\n        if (\\n            (keccak256(abi.encodePacked(accounts[0].mode)) != keccak256(abi.encodePacked(\\\"P\\\"))) &&\\n            (keccak256(abi.encodePacked(accounts[0].mode)) != keccak256(abi.encodePacked(\\\"A\\\")))\\n        ) {\\n            revert BEMACoin_ModeMustEitherBe_P_Or_A_();\\n        }\\n        string memory mode = accounts[0].mode;\\n        if (amount > 0 && percentagefromAvailable == 0) {\\n            if (amount > s_available) {\\n                revert BEMACoin_AmountHigherThanAvailable();\\n            }\\n            uint256 total;\\n            for (uint i = 0; i < accounts.length; i++) {\\n                if (\\n                    keccak256(abi.encodePacked(accounts[i].mode)) !=\\n                    keccak256(abi.encodePacked(mode))\\n                ) {\\n                    revert BEMACoin_IndividualModeMustBeSame();\\n                }\\n\\n                total += accounts[i].value;\\n\\n                if (keccak256(abi.encodePacked(mode)) == keccak256(abi.encodePacked(\\\"P\\\"))) {\\n                    if (total > 100) {\\n                        revert BEMACoin_TotalsShouldEqual100();\\n                    }\\n                    mintingAmount = (accounts[i].value * amount) / 100;\\n                } else if (keccak256(abi.encodePacked(mode)) == keccak256(abi.encodePacked(\\\"A\\\"))) {\\n                    if (total > amount) {\\n                        revert BEMACoin_TotalShouldEqualAmount();\\n                    }\\n                    mintingAmount = accounts[i].value;\\n                }\\n                _mint(accounts[i].account, mintingAmount);\\n            }\\n        } else if (amount == 0 && percentagefromAvailable > 0) {\\n            if (percentagefromAvailable > 100) {\\n                revert BEMACoin_PercentageMustBeAbove100();\\n            }\\n            uint256 amountValue = (percentagefromAvailable * s_available) / 100;\\n            uint256 total;\\n            for (uint i = 0; i < accounts.length; i++) {\\n                if (\\n                    keccak256(abi.encodePacked(accounts[i].mode)) !=\\n                    keccak256(abi.encodePacked(mode))\\n                ) {\\n                    revert BEMACoin_IndividualModeMustBeSame();\\n                }\\n\\n                total += accounts[i].value;\\n                if (keccak256(abi.encodePacked(mode)) == keccak256(abi.encodePacked(\\\"P\\\"))) {\\n                    if (total > 100) {\\n                        revert BEMACoin_TotalsShouldEqual100();\\n                    }\\n                    mintingAmount = (accounts[i].value * amountValue) / 100;\\n                } else if (keccak256(abi.encodePacked(mode)) == keccak256(abi.encodePacked(\\\"A\\\"))) {\\n                    if (total > amountValue) {\\n                        revert BEMACoin_TotalShouldEqualAmount();\\n                    }\\n                    mintingAmount = accounts[i].value;\\n                }\\n                _mint(accounts[i].account, mintingAmount);\\n            }\\n        }\\n        s_available = s_available - mintingAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xf68c73f563aa8e6d4d2ebddf82b086dd922c5c235556bd3d238cf78bc08e9e24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526aa56fa5b99019a5c80000006006556006546007553480156200002657600080fd5b506040518060400160405280600881526020017f42656d61436f696e0000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f424d436f696e00000000000000000000000000000000000000000000000000008152508160039080519060200190620000ab929190620001bb565b508060049080519060200190620000c4929190620001bb565b505050620000e7620000db620000ed60201b60201c565b620000f560201b60201c565b620002d0565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001c9906200029a565b90600052602060002090601f016020900481019282620001ed576000855562000239565b82601f106200020857805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002385782518255916020019190600101906200021b565b5b5090506200024891906200024c565b5090565b5b80821115620002675760008160009055506001016200024d565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002b357607f821691505b60208210811415620002ca57620002c96200026b565b5b50919050565b61263180620002e06000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d7146102d3578063a9059cbb14610303578063dd62ed3e14610333578063dfe50c1914610363578063f2fde38b1461037f57610116565b806370a082311461025d578063715018a61461028d5780638da5cb5b1461029757806395d89b41146102b557610116565b806318160ddd116100e957806318160ddd146101a357806323b872dd146101c1578063313ce567146101f1578063395093511461020f5780635d6418471461023f57610116565b806306fdde031461011b578063095ea7b3146101395780630d1f872f146101695780631091c2ea14610185575b600080fd5b61012361039b565b604051610130919061178c565b60405180910390f35b610153600480360381019061014e9190611856565b61042d565b60405161016091906118b1565b60405180910390f35b610183600480360381019061017e91906118cc565b610450565b005b61018d61046b565b60405161019a9190611908565b60405180910390f35b6101ab610471565b6040516101b89190611908565b60405180910390f35b6101db60048036038101906101d69190611923565b61047b565b6040516101e891906118b1565b60405180910390f35b6101f96104aa565b6040516102069190611992565b60405180910390f35b61022960048036038101906102249190611856565b6104b3565b60405161023691906118b1565b60405180910390f35b6102476104ea565b6040516102549190611908565b60405180910390f35b610277600480360381019061027291906119ad565b6104f0565b6040516102849190611908565b60405180910390f35b610295610538565b005b61029f61054c565b6040516102ac91906119e9565b60405180910390f35b6102bd610576565b6040516102ca919061178c565b60405180910390f35b6102ed60048036038101906102e89190611856565b610608565b6040516102fa91906118b1565b60405180910390f35b61031d60048036038101906103189190611856565b61067f565b60405161032a91906118b1565b60405180910390f35b61034d60048036038101906103489190611a04565b6106a2565b60405161035a9190611908565b60405180910390f35b61037d60048036038101906103789190611ce9565b610729565b005b610399600480360381019061039491906119ad565b610ef3565b005b6060600380546103aa90611d87565b80601f01602080910402602001604051908101604052809291908181526020018280546103d690611d87565b80156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b5050505050905090565b600080610438610f77565b9050610445818585610f7f565b600191505092915050565b61045861114a565b8060068190555060065460078190555050565b60075481565b6000600254905090565b600080610486610f77565b90506104938582856111c8565b61049e858585611254565b60019150509392505050565b60006012905090565b6000806104be610f77565b90506104df8185856104d085896106a2565b6104da9190611de8565b610f7f565b600191505092915050565b60065481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61054061114a565b61054a60006114cc565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461058590611d87565b80601f01602080910402602001604051908101604052809291908181526020018280546105b190611d87565b80156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b5050505050905090565b600080610613610f77565b9050600061062182866106a2565b905083811015610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d90611eb0565b60405180910390fd5b6106738286868403610f7f565b60019250505092915050565b60008061068a610f77565b9050610697818585611254565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61073161114a565b600080841180156107425750600083115b8061075b57506000841115801561075a575060008311155b5b806107665750600084105b806107715750600083105b156107a8576040517f31ab2d6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516020016107b790611f27565b60405160208183030381529060405280519060200120826000815181106107e1576107e0611f3c565b5b6020026020010151604001516040516020016107fd9190611f9c565b604051602081830303815290604052805190602001201415801561088a575060405160200161082b90611fff565b604051602081830303815290604052805190602001208260008151811061085557610854611f3c565b5b6020026020010151604001516040516020016108719190611f9c565b6040516020818303038152906040528051906020012014155b156108c1576040517f5a15ad9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826000815181106108d7576108d6611f3c565b5b60200260200101516040015190506000851180156108f55750600084145b15610bd157600754851115610936576040517fc3ad6f3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b8451811015610bca57826040516020016109589190611f9c565b6040516020818303038152906040528051906020012085828151811061098157610980611f3c565b5b60200260200101516040015160405160200161099d9190611f9c565b60405160208183030381529060405280519060200120146109ea576040517f0267b87700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8481815181106109fd576109fc611f3c565b5b60200260200101516020015182610a149190611de8565b9150604051602001610a2590611f27565b6040516020818303038152906040528051906020012083604051602001610a4c9190611f9c565b604051602081830303815290604052805190602001201415610ae0576064821115610aa3576040517f7777d49200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606487868381518110610ab957610ab8611f3c565b5b602002602001015160200151610acf9190612014565b610ad9919061209d565b9350610b8f565b604051602001610aef90611fff565b6040516020818303038152906040528051906020012083604051602001610b169190611f9c565b604051602081830303815290604052805190602001201415610b8e5786821115610b6c576040517fbaf88f1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848181518110610b7f57610b7e611f3c565b5b60200260200101516020015193505b5b610bb7858281518110610ba557610ba4611f3c565b5b60200260200101516000015185611592565b8080610bc2906120ce565b91505061093e565b5050610ed8565b600085148015610be15750600084115b15610ed7576064841115610c21576040517faa314fc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606460075486610c339190612014565b610c3d919061209d565b9050600080600090505b8551811015610ed35783604051602001610c619190611f9c565b60405160208183030381529060405280519060200120868281518110610c8a57610c89611f3c565b5b602002602001015160400151604051602001610ca69190611f9c565b6040516020818303038152906040528051906020012014610cf3576040517f0267b87700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858181518110610d0657610d05611f3c565b5b60200260200101516020015182610d1d9190611de8565b9150604051602001610d2e90611f27565b6040516020818303038152906040528051906020012084604051602001610d559190611f9c565b604051602081830303815290604052805190602001201415610de9576064821115610dac576040517f7777d49200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606483878381518110610dc257610dc1611f3c565b5b602002602001015160200151610dd89190612014565b610de2919061209d565b9450610e98565b604051602001610df890611fff565b6040516020818303038152906040528051906020012084604051602001610e1f9190611f9c565b604051602081830303815290604052805190602001201415610e975782821115610e75576040517fbaf88f1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858181518110610e8857610e87611f3c565b5b60200260200101516020015194505b5b610ec0868281518110610eae57610ead611f3c565b5b60200260200101516000015186611592565b8080610ecb906120ce565b915050610c47565b5050505b5b81600754610ee69190612117565b6007819055505050505050565b610efb61114a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f62906121bd565b60405180910390fd5b610f74816114cc565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe69061224f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561105f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611056906122e1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161113d9190611908565b60405180910390a3505050565b611152610f77565b73ffffffffffffffffffffffffffffffffffffffff1661117061054c565b73ffffffffffffffffffffffffffffffffffffffff16146111c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bd9061234d565b60405180910390fd5b565b60006111d484846106a2565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461124e5781811015611240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611237906123b9565b60405180910390fd5b61124d8484848403610f7f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb9061244b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b906124dd565b60405180910390fd5b61133f8383836116e9565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156113c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bc9061256f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516114b39190611908565b60405180910390a36114c68484846116ee565b50505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f9906125db565b60405180910390fd5b61160e600083836116e9565b80600260008282546116209190611de8565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116d19190611908565b60405180910390a36116e5600083836116ee565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561172d578082015181840152602081019050611712565b8381111561173c576000848401525b50505050565b6000601f19601f8301169050919050565b600061175e826116f3565b61176881856116fe565b935061177881856020860161170f565b61178181611742565b840191505092915050565b600060208201905081810360008301526117a68184611753565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ed826117c2565b9050919050565b6117fd816117e2565b811461180857600080fd5b50565b60008135905061181a816117f4565b92915050565b6000819050919050565b61183381611820565b811461183e57600080fd5b50565b6000813590506118508161182a565b92915050565b6000806040838503121561186d5761186c6117b8565b5b600061187b8582860161180b565b925050602061188c85828601611841565b9150509250929050565b60008115159050919050565b6118ab81611896565b82525050565b60006020820190506118c660008301846118a2565b92915050565b6000602082840312156118e2576118e16117b8565b5b60006118f084828501611841565b91505092915050565b61190281611820565b82525050565b600060208201905061191d60008301846118f9565b92915050565b60008060006060848603121561193c5761193b6117b8565b5b600061194a8682870161180b565b935050602061195b8682870161180b565b925050604061196c86828701611841565b9150509250925092565b600060ff82169050919050565b61198c81611976565b82525050565b60006020820190506119a76000830184611983565b92915050565b6000602082840312156119c3576119c26117b8565b5b60006119d18482850161180b565b91505092915050565b6119e3816117e2565b82525050565b60006020820190506119fe60008301846119da565b92915050565b60008060408385031215611a1b57611a1a6117b8565b5b6000611a298582860161180b565b9250506020611a3a8582860161180b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a8182611742565b810181811067ffffffffffffffff82111715611aa057611a9f611a49565b5b80604052505050565b6000611ab36117ae565b9050611abf8282611a78565b919050565b600067ffffffffffffffff821115611adf57611ade611a49565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611b1f57611b1e611a49565b5b611b2882611742565b9050602081019050919050565b82818337600083830152505050565b6000611b57611b5284611b04565b611aa9565b905082815260208101848484011115611b7357611b72611aff565b5b611b7e848285611b35565b509392505050565b600082601f830112611b9b57611b9a611a44565b5b8135611bab848260208601611b44565b91505092915050565b600060608284031215611bca57611bc9611af5565b5b611bd46060611aa9565b90506000611be48482850161180b565b6000830152506020611bf884828501611841565b602083015250604082013567ffffffffffffffff811115611c1c57611c1b611afa565b5b611c2884828501611b86565b60408301525092915050565b6000611c47611c4284611ac4565b611aa9565b90508083825260208201905060208402830185811115611c6a57611c69611af0565b5b835b81811015611cb157803567ffffffffffffffff811115611c8f57611c8e611a44565b5b808601611c9c8982611bb4565b85526020850194505050602081019050611c6c565b5050509392505050565b600082601f830112611cd057611ccf611a44565b5b8135611ce0848260208601611c34565b91505092915050565b600080600060608486031215611d0257611d016117b8565b5b6000611d1086828701611841565b9350506020611d2186828701611841565b925050604084013567ffffffffffffffff811115611d4257611d416117bd565b5b611d4e86828701611cbb565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d9f57607f821691505b60208210811415611db357611db2611d58565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611df382611820565b9150611dfe83611820565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3357611e32611db9565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611e9a6025836116fe565b9150611ea582611e3e565b604082019050919050565b60006020820190508181036000830152611ec981611e8d565b9050919050565b600081905092915050565b7f5000000000000000000000000000000000000000000000000000000000000000600082015250565b6000611f11600183611ed0565b9150611f1c82611edb565b600182019050919050565b6000611f3282611f04565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611f76826116f3565b611f808185611ed0565b9350611f9081856020860161170f565b80840191505092915050565b6000611fa88284611f6b565b915081905092915050565b7f4100000000000000000000000000000000000000000000000000000000000000600082015250565b6000611fe9600183611ed0565b9150611ff482611fb3565b600182019050919050565b600061200a82611fdc565b9150819050919050565b600061201f82611820565b915061202a83611820565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561206357612062611db9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120a882611820565b91506120b383611820565b9250826120c3576120c261206e565b5b828204905092915050565b60006120d982611820565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561210c5761210b611db9565b5b600182019050919050565b600061212282611820565b915061212d83611820565b9250828210156121405761213f611db9565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006121a76026836116fe565b91506121b28261214b565b604082019050919050565b600060208201905081810360008301526121d68161219a565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122396024836116fe565b9150612244826121dd565b604082019050919050565b600060208201905081810360008301526122688161222c565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006122cb6022836116fe565b91506122d68261226f565b604082019050919050565b600060208201905081810360008301526122fa816122be565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123376020836116fe565b915061234282612301565b602082019050919050565b600060208201905081810360008301526123668161232a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006123a3601d836116fe565b91506123ae8261236d565b602082019050919050565b600060208201905081810360008301526123d281612396565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006124356025836116fe565b9150612440826123d9565b604082019050919050565b6000602082019050818103600083015261246481612428565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006124c76023836116fe565b91506124d28261246b565b604082019050919050565b600060208201905081810360008301526124f6816124ba565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006125596026836116fe565b9150612564826124fd565b604082019050919050565b600060208201905081810360008301526125888161254c565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006125c5601f836116fe565b91506125d08261258f565b602082019050919050565b600060208201905081810360008301526125f4816125b8565b905091905056fea2646970667358221220ecca1d540076316a565b9aa89cccfd5c5f2f62f4f278a3877c3c1d3f639a5bb164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d7146102d3578063a9059cbb14610303578063dd62ed3e14610333578063dfe50c1914610363578063f2fde38b1461037f57610116565b806370a082311461025d578063715018a61461028d5780638da5cb5b1461029757806395d89b41146102b557610116565b806318160ddd116100e957806318160ddd146101a357806323b872dd146101c1578063313ce567146101f1578063395093511461020f5780635d6418471461023f57610116565b806306fdde031461011b578063095ea7b3146101395780630d1f872f146101695780631091c2ea14610185575b600080fd5b61012361039b565b604051610130919061178c565b60405180910390f35b610153600480360381019061014e9190611856565b61042d565b60405161016091906118b1565b60405180910390f35b610183600480360381019061017e91906118cc565b610450565b005b61018d61046b565b60405161019a9190611908565b60405180910390f35b6101ab610471565b6040516101b89190611908565b60405180910390f35b6101db60048036038101906101d69190611923565b61047b565b6040516101e891906118b1565b60405180910390f35b6101f96104aa565b6040516102069190611992565b60405180910390f35b61022960048036038101906102249190611856565b6104b3565b60405161023691906118b1565b60405180910390f35b6102476104ea565b6040516102549190611908565b60405180910390f35b610277600480360381019061027291906119ad565b6104f0565b6040516102849190611908565b60405180910390f35b610295610538565b005b61029f61054c565b6040516102ac91906119e9565b60405180910390f35b6102bd610576565b6040516102ca919061178c565b60405180910390f35b6102ed60048036038101906102e89190611856565b610608565b6040516102fa91906118b1565b60405180910390f35b61031d60048036038101906103189190611856565b61067f565b60405161032a91906118b1565b60405180910390f35b61034d60048036038101906103489190611a04565b6106a2565b60405161035a9190611908565b60405180910390f35b61037d60048036038101906103789190611ce9565b610729565b005b610399600480360381019061039491906119ad565b610ef3565b005b6060600380546103aa90611d87565b80601f01602080910402602001604051908101604052809291908181526020018280546103d690611d87565b80156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b5050505050905090565b600080610438610f77565b9050610445818585610f7f565b600191505092915050565b61045861114a565b8060068190555060065460078190555050565b60075481565b6000600254905090565b600080610486610f77565b90506104938582856111c8565b61049e858585611254565b60019150509392505050565b60006012905090565b6000806104be610f77565b90506104df8185856104d085896106a2565b6104da9190611de8565b610f7f565b600191505092915050565b60065481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61054061114a565b61054a60006114cc565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461058590611d87565b80601f01602080910402602001604051908101604052809291908181526020018280546105b190611d87565b80156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b5050505050905090565b600080610613610f77565b9050600061062182866106a2565b905083811015610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d90611eb0565b60405180910390fd5b6106738286868403610f7f565b60019250505092915050565b60008061068a610f77565b9050610697818585611254565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61073161114a565b600080841180156107425750600083115b8061075b57506000841115801561075a575060008311155b5b806107665750600084105b806107715750600083105b156107a8576040517f31ab2d6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516020016107b790611f27565b60405160208183030381529060405280519060200120826000815181106107e1576107e0611f3c565b5b6020026020010151604001516040516020016107fd9190611f9c565b604051602081830303815290604052805190602001201415801561088a575060405160200161082b90611fff565b604051602081830303815290604052805190602001208260008151811061085557610854611f3c565b5b6020026020010151604001516040516020016108719190611f9c565b6040516020818303038152906040528051906020012014155b156108c1576040517f5a15ad9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826000815181106108d7576108d6611f3c565b5b60200260200101516040015190506000851180156108f55750600084145b15610bd157600754851115610936576040517fc3ad6f3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b8451811015610bca57826040516020016109589190611f9c565b6040516020818303038152906040528051906020012085828151811061098157610980611f3c565b5b60200260200101516040015160405160200161099d9190611f9c565b60405160208183030381529060405280519060200120146109ea576040517f0267b87700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8481815181106109fd576109fc611f3c565b5b60200260200101516020015182610a149190611de8565b9150604051602001610a2590611f27565b6040516020818303038152906040528051906020012083604051602001610a4c9190611f9c565b604051602081830303815290604052805190602001201415610ae0576064821115610aa3576040517f7777d49200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606487868381518110610ab957610ab8611f3c565b5b602002602001015160200151610acf9190612014565b610ad9919061209d565b9350610b8f565b604051602001610aef90611fff565b6040516020818303038152906040528051906020012083604051602001610b169190611f9c565b604051602081830303815290604052805190602001201415610b8e5786821115610b6c576040517fbaf88f1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848181518110610b7f57610b7e611f3c565b5b60200260200101516020015193505b5b610bb7858281518110610ba557610ba4611f3c565b5b60200260200101516000015185611592565b8080610bc2906120ce565b91505061093e565b5050610ed8565b600085148015610be15750600084115b15610ed7576064841115610c21576040517faa314fc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606460075486610c339190612014565b610c3d919061209d565b9050600080600090505b8551811015610ed35783604051602001610c619190611f9c565b60405160208183030381529060405280519060200120868281518110610c8a57610c89611f3c565b5b602002602001015160400151604051602001610ca69190611f9c565b6040516020818303038152906040528051906020012014610cf3576040517f0267b87700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858181518110610d0657610d05611f3c565b5b60200260200101516020015182610d1d9190611de8565b9150604051602001610d2e90611f27565b6040516020818303038152906040528051906020012084604051602001610d559190611f9c565b604051602081830303815290604052805190602001201415610de9576064821115610dac576040517f7777d49200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606483878381518110610dc257610dc1611f3c565b5b602002602001015160200151610dd89190612014565b610de2919061209d565b9450610e98565b604051602001610df890611fff565b6040516020818303038152906040528051906020012084604051602001610e1f9190611f9c565b604051602081830303815290604052805190602001201415610e975782821115610e75576040517fbaf88f1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858181518110610e8857610e87611f3c565b5b60200260200101516020015194505b5b610ec0868281518110610eae57610ead611f3c565b5b60200260200101516000015186611592565b8080610ecb906120ce565b915050610c47565b5050505b5b81600754610ee69190612117565b6007819055505050505050565b610efb61114a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f62906121bd565b60405180910390fd5b610f74816114cc565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe69061224f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561105f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611056906122e1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161113d9190611908565b60405180910390a3505050565b611152610f77565b73ffffffffffffffffffffffffffffffffffffffff1661117061054c565b73ffffffffffffffffffffffffffffffffffffffff16146111c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bd9061234d565b60405180910390fd5b565b60006111d484846106a2565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461124e5781811015611240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611237906123b9565b60405180910390fd5b61124d8484848403610f7f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb9061244b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b906124dd565b60405180910390fd5b61133f8383836116e9565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156113c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bc9061256f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516114b39190611908565b60405180910390a36114c68484846116ee565b50505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f9906125db565b60405180910390fd5b61160e600083836116e9565b80600260008282546116209190611de8565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116d19190611908565b60405180910390a36116e5600083836116ee565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561172d578082015181840152602081019050611712565b8381111561173c576000848401525b50505050565b6000601f19601f8301169050919050565b600061175e826116f3565b61176881856116fe565b935061177881856020860161170f565b61178181611742565b840191505092915050565b600060208201905081810360008301526117a68184611753565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ed826117c2565b9050919050565b6117fd816117e2565b811461180857600080fd5b50565b60008135905061181a816117f4565b92915050565b6000819050919050565b61183381611820565b811461183e57600080fd5b50565b6000813590506118508161182a565b92915050565b6000806040838503121561186d5761186c6117b8565b5b600061187b8582860161180b565b925050602061188c85828601611841565b9150509250929050565b60008115159050919050565b6118ab81611896565b82525050565b60006020820190506118c660008301846118a2565b92915050565b6000602082840312156118e2576118e16117b8565b5b60006118f084828501611841565b91505092915050565b61190281611820565b82525050565b600060208201905061191d60008301846118f9565b92915050565b60008060006060848603121561193c5761193b6117b8565b5b600061194a8682870161180b565b935050602061195b8682870161180b565b925050604061196c86828701611841565b9150509250925092565b600060ff82169050919050565b61198c81611976565b82525050565b60006020820190506119a76000830184611983565b92915050565b6000602082840312156119c3576119c26117b8565b5b60006119d18482850161180b565b91505092915050565b6119e3816117e2565b82525050565b60006020820190506119fe60008301846119da565b92915050565b60008060408385031215611a1b57611a1a6117b8565b5b6000611a298582860161180b565b9250506020611a3a8582860161180b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a8182611742565b810181811067ffffffffffffffff82111715611aa057611a9f611a49565b5b80604052505050565b6000611ab36117ae565b9050611abf8282611a78565b919050565b600067ffffffffffffffff821115611adf57611ade611a49565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611b1f57611b1e611a49565b5b611b2882611742565b9050602081019050919050565b82818337600083830152505050565b6000611b57611b5284611b04565b611aa9565b905082815260208101848484011115611b7357611b72611aff565b5b611b7e848285611b35565b509392505050565b600082601f830112611b9b57611b9a611a44565b5b8135611bab848260208601611b44565b91505092915050565b600060608284031215611bca57611bc9611af5565b5b611bd46060611aa9565b90506000611be48482850161180b565b6000830152506020611bf884828501611841565b602083015250604082013567ffffffffffffffff811115611c1c57611c1b611afa565b5b611c2884828501611b86565b60408301525092915050565b6000611c47611c4284611ac4565b611aa9565b90508083825260208201905060208402830185811115611c6a57611c69611af0565b5b835b81811015611cb157803567ffffffffffffffff811115611c8f57611c8e611a44565b5b808601611c9c8982611bb4565b85526020850194505050602081019050611c6c565b5050509392505050565b600082601f830112611cd057611ccf611a44565b5b8135611ce0848260208601611c34565b91505092915050565b600080600060608486031215611d0257611d016117b8565b5b6000611d1086828701611841565b9350506020611d2186828701611841565b925050604084013567ffffffffffffffff811115611d4257611d416117bd565b5b611d4e86828701611cbb565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d9f57607f821691505b60208210811415611db357611db2611d58565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611df382611820565b9150611dfe83611820565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3357611e32611db9565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611e9a6025836116fe565b9150611ea582611e3e565b604082019050919050565b60006020820190508181036000830152611ec981611e8d565b9050919050565b600081905092915050565b7f5000000000000000000000000000000000000000000000000000000000000000600082015250565b6000611f11600183611ed0565b9150611f1c82611edb565b600182019050919050565b6000611f3282611f04565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611f76826116f3565b611f808185611ed0565b9350611f9081856020860161170f565b80840191505092915050565b6000611fa88284611f6b565b915081905092915050565b7f4100000000000000000000000000000000000000000000000000000000000000600082015250565b6000611fe9600183611ed0565b9150611ff482611fb3565b600182019050919050565b600061200a82611fdc565b9150819050919050565b600061201f82611820565b915061202a83611820565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561206357612062611db9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120a882611820565b91506120b383611820565b9250826120c3576120c261206e565b5b828204905092915050565b60006120d982611820565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561210c5761210b611db9565b5b600182019050919050565b600061212282611820565b915061212d83611820565b9250828210156121405761213f611db9565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006121a76026836116fe565b91506121b28261214b565b604082019050919050565b600060208201905081810360008301526121d68161219a565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122396024836116fe565b9150612244826121dd565b604082019050919050565b600060208201905081810360008301526122688161222c565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006122cb6022836116fe565b91506122d68261226f565b604082019050919050565b600060208201905081810360008301526122fa816122be565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123376020836116fe565b915061234282612301565b602082019050919050565b600060208201905081810360008301526123668161232a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006123a3601d836116fe565b91506123ae8261236d565b602082019050919050565b600060208201905081810360008301526123d281612396565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006124356025836116fe565b9150612440826123d9565b604082019050919050565b6000602082019050818103600083015261246481612428565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006124c76023836116fe565b91506124d28261246b565b604082019050919050565b600060208201905081810360008301526124f6816124ba565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006125596026836116fe565b9150612564826124fd565b604082019050919050565b600060208201905081810360008301526125888161254c565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006125c5601f836116fe565b91506125d08261258f565b602082019050919050565b600060208201905081810360008301526125f4816125b8565b905091905056fea2646970667358221220ecca1d540076316a565b9aa89cccfd5c5f2f62f4f278a3877c3c1d3f639a5bb164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 858,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "s_maxSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 861,
        "contract": "contracts/BemaCoin.sol:BemaCoin",
        "label": "s_available",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}